// Eq:    fun(@A: Type, x: A, y: A) -> Type
// refl:  fun(@A: Type, x: A) -> Eq(@A, x, x)
// subst: fun(@A: Type, @x: A, @y: A, @p: A -> Type, x_eq_y: Eq(@A, x, y), p_x: p(x)) -> p(y)
// bool_rec: fun(b: Bool, p: Bool -> Type) -> p(true) -> p(false) -> p(b)

def sym: fun(@A: Type, @a: A, @b: A) -> Eq(a, b) -> Eq(b, a)
    = fun(a_eq_b) =>
        let p = fun(x) => Eq(@A, x, a);
        let p_a:  p(a) = refl(a);
        let goal: p(b) = subst(@A, @a, @b, @p, a_eq_b, p_a);
        goal
        ;

def trans: fun(@A: Type, @a: A, @b: A, @c: A) -> Eq(a, b) -> Eq(b, c) -> Eq(a, c)
    = fun(a_eq_b, b_eq_c) =>
        let p = fun(x) => Eq(@A, a, x);
        let p_b: p(b) = a_eq_b;
        let goal: p(c) = subst(@A, @b, @c, @p, b_eq_c, p_b);
        goal
        ;

def cong: fun(@A: Type, @B: Type, @a: A, @b: A, f: A -> B) -> Eq(a, b) -> Eq(f(a), f(b))
    = fun(f, a_eq_b) =>
        let p = fun(x) => Eq(@B, f(a), f(x));
        let p_a:  p(a) = refl(f(a));
        let goal: p(b) = subst(@A, @a, @b, @p, a_eq_b, p_a);
        goal
        ;

def cong-app: fun(@A: Type, @B: Type, a: A, f: A -> B, g: A -> B) -> Eq(f, g) -> Eq(f(a), g(a))
    = fun(a, f, g, f_eq_g) =>
        let p = fun(x : A -> B) => Eq(@B, f(a), x(a));
        let p_f: p(f) = refl(_);
        let goal = subst(@(A -> B), @f, @g, @p, f_eq_g, p_f);
        goal
        ;

def not: Bool -> Bool
    = fun(b) => bool_rec(b, fun(_) => Bool, false, true);

def and: Bool -> Bool -> Bool
    = fun(a, b) => bool_rec(a, fun(_) => Bool, b, false);

def or: Bool -> Bool -> Bool
    = fun(a, b) => bool_rec(a, fun(_) => Bool, true, b);

def xor: Bool -> Bool -> Bool
    = fun(a, b) => bool_rec(a, fun(_) => Bool, not(b), b);

def not_false_eq_true: Eq(not(false), true) = refl(_);
def not_true_eq_false: Eq(not(true), false) = refl(_);

def not_self_inverse: fun(b: Bool) -> Eq(not(not(b)), b)
    = fun(b) =>
        let p = fun(a) => Eq(not(not(a)), a);
        let p_true = refl(_);
        let p_false = refl(_);
        bool_rec(b, p, p_true, p_false)
        ;

def and_left_identity: fun(a: Bool) -> Eq(@Bool, and(true, a), a)
    = fun(a) =>
        let p = fun(x) => Eq(and(true, x), x);
        let p_true = refl(_);
        let p_false = refl(_);
        bool_rec(a, p, p_true, p_false)
        ;

def and_right_identity: fun(a: Bool) -> Eq(@Bool, and(a, true), a)
    = fun(a) =>
        let p = fun(x) => Eq(and(x, true), x);
        let p_true = refl(_);
        let p_false = refl(_);
        bool_rec(a, p, p_true, p_false)
        ;

def and_left_absorb: fun(a: Bool) -> Eq(@Bool, and(false, a), false)
    = fun(a) =>
        let p = fun(x) => Eq(and(false, x), false);
        let p_true = refl(_);
        let p_false = refl(_);
        bool_rec(a, p, p_true, p_false)
        ;

def and_right_absorb: fun(a: Bool) -> Eq(@Bool, and(a, false), false)
    = fun(a) =>
        let p = fun(x) => Eq(and(x, false), false);
        let p_true = refl(_);
        let p_false = refl(_);
        bool_rec(a, p, p_true, p_false)
        ;

def and_commutative: fun(a: Bool, b: Bool) -> Eq(@Bool, and(a, b), and(b, a))
    = fun(a, b) =>
        let p = fun(x) => Eq(and(x, b), and(b, x));
        let p_true: Eq(@Bool, and(true, b), and(b, true)) =
            let x = and_left_identity(b);
            let y = and_right_identity(b);
            trans(x, sym(y)); // true && b == true == b && true
        let p_false: Eq(@Bool, and(false, b), and(b, false)) =
            let x = and_left_absorb(b);
            let y = and_right_absorb(b);
            trans(x, sym(y)); // false && b == false == b && false
        bool_rec(a, p, p_true, p_false) ;
