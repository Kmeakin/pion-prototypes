exit status: 0

stdout = """
def x1: Type = Type;

def x2: Type = Int;

def x3: Type = Bool;

def x4: Type -> Int -> Type = Array;

def x5: Int -> Int -> Int = add;

def x6: Int -> Int -> Int = sub;

def x7: Int -> Int -> Int = mul;

def x8: Int -> Int -> Bool = eq;

def x9: Int -> Int -> Bool = lt;

def x10: Int -> Int -> Bool = gt;

def x11: fun(@A: Type) -> A -> A -> Type = Eq;

def x12: fun(@A: Type, x: A) -> Eq(@A, x, x) = refl;

def x13: fun(@A: Type, @p: A -> Type, @x: A, @y: A) -> Eq(@A, x, y) ->
    p(x) -> p(y) = subst;

def x14: fun(@p: Bool -> Type, b: Bool) -> p(true) -> p(false) -> p(b) =
    bool_rec;
types of expressions:
span   | source                                   | type
-------|------------------------------------------|-----------------------------
9..13 | Type                                     | Type
24..27 | Int                                      | Type
38..42 | Bool                                     | Type
53..58 | Array                                    | Type -> Int -> Type
70..73 | add                                      | Int -> Int -> Int
84..87 | sub                                      | Int -> Int -> Int
98..101 | mul                                      | Int -> Int -> Int
113..115 | eq                                       | Int -> Int -> Bool
126..128 | lt                                       | Int -> Int -> Bool
140..142 | gt                                       | Int -> Int -> Bool
155..157 | Eq                                       | fun(@A: Type) -> A -> A -> Type
169..173 | refl                                     | fun(@A: Type, x: A) -> Eq(@A, x, x)
185..190 | subst                                    | fun(@A: Type, @p: A -> Type, @x: A, @y: A) -> Eq(@A, x, y) -> p(x) -> p(y)
203..211 | bool_rec                                 | fun(@p: Bool -> Type, b: Bool) -> p(true) -> p(false) -> p(b)
metavars:
?0 = Type
?1 = Type
?2 = Type
?3 = Type -> Int -> Type
?4 = Int -> Int -> Int
?5 = Int -> Int -> Int
?6 = Int -> Int -> Int
?7 = Int -> Int -> Bool
?8 = Int -> Int -> Bool
?9 = Int -> Int -> Bool
?10 = fun(@A: Type) -> A -> A -> Type
?11 = fun(@A: Type, x: A) -> Eq(@A, x, x)
?12 = fun(@A: Type, @p: A -> Type, @x: A, @y: A) -> Eq(@A, x, y) -> p(x) -> p(y)
?13 = fun(@p: Bool -> Type, b: Bool) -> p(true) -> p(false) -> p(b)
"""

stderr = """

"""
