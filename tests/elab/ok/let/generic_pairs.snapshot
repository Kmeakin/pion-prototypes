exit status: 0

stdout = """
def fst: fun(A: Type, B: Type) -> (A, B) -> _0 = fun(A: Type, B: Type, p: (A, B)) => let x: _0 = p._0;
x;
types of expressions:
10..66 = fun(A: Type, B: Type) -> (A, B) -> _0
18..22 = Type
28..32 = Type
38..44 = Type
39..40 = Type
42..43 = Type
49..66 = Unbound(2)
62..63 = (Unbound(2), Unbound(2))
65..66 = Unbound(3)
types of patterns:
14..15 = Type
24..25 = Type
34..35 = (Unbound(1), Unbound(1))
53..59 = (?0(Unbound(2), _0, _1), ?1(_0, _1, _0))
54..55 = ?0(_1, _0, _1)
57..58 = ?1(_1, _0, _1)
metavars:
?0 = fun(a: #error, _: #error, _: #error) => a
?1 = fun(a: #error, _: #error, _: #error) => a

def snd: fun(A: Type, B: Type) -> (A, B) -> _1 = fun(A: Type, B: Type, p: (A, B)) => let y: _1 = p._1;
y;
types of expressions:
78..134 = fun(A: Type, B: Type) -> (A, B) -> _1
86..90 = Type
96..100 = Type
106..112 = Type
107..108 = Type
110..111 = Type
117..134 = Unbound(1)
130..131 = (Unbound(2), Unbound(2))
133..134 = Unbound(2)
types of patterns:
82..83 = Type
92..93 = Type
102..103 = (Unbound(1), Unbound(1))
121..127 = (?0(Unbound(2), _0, _1), ?1(_0, _1, _0))
122..123 = ?0(_1, _0, _1)
125..126 = ?1(_1, _0, _1)
metavars:
?0 = fun(a: #error, _: #error, _: #error) => a
?1 = fun(a: #error, _: #error, _: #error) => a
"""

stderr = """

"""
