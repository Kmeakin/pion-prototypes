exit status: 0

stdout = """
def fst: fun(_: (Type, Type)) -> (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1) -> FIXME_QUOTE_UNNAMED_LOCAL._0 = fun(_: (Type, Type)) => let A: Type = FIXME_FUN_PARAM_NAME._0;
let B: Type = FIXME_FUN_PARAM_NAME._1;
fun(_: (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1)) => let x: FIXME_QUOTE_UNNAMED_LOCAL._0 = FIXME_FUN_PARAM_NAME._0;
let y: FIXME_QUOTE_UNNAMED_LOCAL._1 = FIXME_FUN_PARAM_NAME._1;
x;
types of expressions:
10..56 = fun(_: (Type, Type)) -> (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1) -> FIXME_QUOTE_UNNAMED_LOCAL._0
22..34 = Type
23..27 = Type
29..33 = Type
44..50 = Type
45..46 = Type
48..49 = Type
55..56 = FIXME_QUOTE_UNNAMED_LOCAL._0
types of patterns:
14..20 = (Type, Type)
15..16 = Type
18..19 = Type
36..42 = (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1)
37..38 = FIXME_QUOTE_UNNAMED_LOCAL._0
40..41 = FIXME_QUOTE_UNNAMED_LOCAL._1

def snd: fun(_: (Type, Type)) -> (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1) -> FIXME_QUOTE_UNNAMED_LOCAL._1 = fun(_: (Type, Type)) => let A: Type = FIXME_FUN_PARAM_NAME._0;
let B: Type = FIXME_FUN_PARAM_NAME._1;
fun(_: (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1)) => let x: FIXME_QUOTE_UNNAMED_LOCAL._0 = FIXME_FUN_PARAM_NAME._0;
let y: FIXME_QUOTE_UNNAMED_LOCAL._1 = FIXME_FUN_PARAM_NAME._1;
y;
types of expressions:
68..114 = fun(_: (Type, Type)) -> (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1) -> FIXME_QUOTE_UNNAMED_LOCAL._1
80..92 = Type
81..85 = Type
87..91 = Type
102..108 = Type
103..104 = Type
106..107 = Type
113..114 = FIXME_QUOTE_UNNAMED_LOCAL._1
types of patterns:
72..78 = (Type, Type)
73..74 = Type
76..77 = Type
94..100 = (FIXME_QUOTE_UNNAMED_LOCAL._0, FIXME_QUOTE_UNNAMED_LOCAL._1)
95..96 = FIXME_QUOTE_UNNAMED_LOCAL._0
98..99 = FIXME_QUOTE_UNNAMED_LOCAL._1
"""

stderr = """

"""
