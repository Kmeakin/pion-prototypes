exit status: 0

stdout = """
let sym : forall (@A : Type) (@a : A) (@b : A) -> Eq @A a b -> Eq @A b a
    = fun (@A : Type) (@a : A) (@b : A) (a_eq_b : Eq @A a b) =>
        do {
            let p : A -> Type = fun (x : A) => Eq @A x a;
            let p_a : Eq @A a a = refl @A a;
            let goal : Eq @A b a = subst @A @p a b a_eq_b p_a;
            goal
        };
let trans : forall (@A : Type) (@a : A) (@b : A) (@c : A) ->
    Eq @A a b -> Eq @A b c -> Eq @A a c
    = fun (@A : Type) (@a : A) (@b : A) (@c : A) (a_eq_b : Eq @A a b) (b_eq_c : Eq @A b c) =>
        do {
            let p : A -> Type = fun (x : A) => Eq @A a x;
            let p_b : Eq @A a b = a_eq_b;
            let goal : Eq @A a c = subst @A @p b c b_eq_c p_b;
            goal
        };
let cong : forall (@A : Type) (@B : Type) (@a : A) (@b : A) (f : A -> B) ->
    Eq @A a b -> Eq @B (f a) (f b)
    = fun (@A : Type) (@B : Type) (@a : A) (@b : A) (f : A -> B) (a_eq_b : Eq @A a b) =>
        do {
            let p : A -> Type = fun (x : A) => Eq @B (f a) (f x);
            let p_a : Eq @B (f a) (f a) = refl @B (f a);
            let goal : Eq @B (f a) (f b) = subst @A @p a b a_eq_b p_a;
            goal
        };
let cong-app : forall (@A : Type) (@B : Type) (@a : A) (f : A -> B) (g : A -> B) ->
    Eq @(A -> B) f g -> Eq @B (f a) (g a)
    = fun (@A : Type) (@B : Type) (@a : A) (f : A -> B) (g : A -> B) (f-eq-g : Eq @(A -> B) f g) =>
        do {
            let p : (A -> B) -> Type = fun (x : A -> B) => Eq @B (f a) (x a);
            let p_f : Eq @B (f a) (f a) = refl @B (f a);
            let goal : Eq @B (f a) (g a) = subst @(A -> B) @p f g f-eq-g p_f;
            goal
        };
let cast : forall (@T : Type) (@V : Type) -> Eq @Type T V -> T -> V
    = fun (@T : Type) (@V : Type) (t-eq-v : Eq @Type T V) (t : T) =>
        do {
            let p : Type -> Type = fun (x : Type) => x;
            let p-t : T = t;
            let goal : V = subst @Type @p T V t-eq-v p-t;
            goal
        };
"""

stderr = """

"""
